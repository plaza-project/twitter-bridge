#!/usr/bin/env python3

import json
import logging
import os
import traceback
import urllib.parse

import tweepy

from programaker_bridge import BlockArgument  # Needed for argument definition
from programaker_bridge import ProgramakerBridge  # Import bridge functionality
from programaker_bridge import (BlockContext, MessageBasedServiceRegistration,
                                VariableBlockArgument)
from programaker_twitter_service import (TweetListener, assets, auth, config,
                                         rate_limit, storage, utils)

twitter_token = config.get_twitter_token()
twitter_token_secret = config.get_twitter_token_secret()
STORAGE = storage.get_engine()
RATE_LIMIT_MANAGER = rate_limit.RateLimitManager()

AUTH = auth.AuthHandler(config, STORAGE)
LISTENER = TweetListener(AUTH, STORAGE, RATE_LIMIT_MANAGER)
ENDPOINT = config.get_bridge_endpoint()
AUTH_TOKEN = config.get_auth_token()

IS_PUBLIC = os.getenv('TWITTER_PUBLIC_BRIDGE', '0') in ('1', 't', 'true')

callback_url = utils.ws_endpoint_to_callback_url(ENDPOINT)
print("OAuth callback URL:", callback_url)


class Registerer(MessageBasedServiceRegistration):
    def __init__(self, bridge, *args, **kwargs):
        MessageBasedServiceRegistration.__init__(self, *args, **kwargs)
        self.auth_to_connection = {}
        self.bridge = bridge

    def get_call_to_action_text(self, extra_data):
        if not extra_data:
            # Initial getter, we could also ignore it
            return """
            Log in Twitter to connect to the service:
            """

        auth = tweepy.OAuthHandler(twitter_token, twitter_token_secret,
                                   callback_url)

        redirect_url = auth.get_authorization_url()
        self.auth_to_connection[auth.request_token['oauth_token']] = (
            extra_data.user_id, auth.request_token)

        return """
        Log in Twitter to connect to the service:

        <a href="{url}">Log in</a>
        """.format(url=redirect_url)

    def _preload_followers(self, db_conn, api, twitter_id):
        followers = set(api.followers_ids(screen_name=api.auth.get_username()))
        STORAGE._initialize_followers(db_conn, twitter_id, followers)

    def register(self, data, extra_data):
        oauth_data = urllib.parse.parse_qs(data['query_string'])

        token = oauth_data['oauth_token'][0]
        verifier = oauth_data['oauth_verifier'][0]

        connection, request_token = self.auth_to_connection[token]

        auth = tweepy.OAuthHandler(twitter_token, twitter_token_secret)
        auth.request_token = request_token
        auth.get_access_token(verifier)

        api = tweepy.API(auth)
        user = api.me()
        is_new = STORAGE.register_user(
            connection, (auth.access_token, auth.access_token_secret),
            in_add_transaction=lambda db_conn, twitter_id: self.
            _preload_followers(db_conn, api, twitter_id))

        logging.info("(new={}) Connection {} is registered with: {}".format(
            is_new,
            connection,
            auth.access_token,
        ))

        LISTENER.add_new_user(connection)
        self.bridge.establish_connection(connection, name=user.screen_name)
        return True


bridge = ProgramakerBridge(
    name="Twitter",
    endpoint=ENDPOINT,
    icon=assets.open_icon(),
    is_public=IS_PUBLIC,
    events=[
        'on_new_tweet',
        'on_new_tweet_on_home_timeline',
        'on_followed',
        'on_unfollowed',
    ],
    token=AUTH_TOKEN,
)

registerer = Registerer(bridge=bridge)
bridge.registerer = registerer

on_new_tweet_event = bridge.events.on_new_tweet
on_new_tweet_event.add_trigger_block(
    id="on_new_tweet_by_account",
    message="When %1 tweets. Save to %2",
    arguments=[BlockArgument(str, "obichero"), VariableBlockArgument("struct")],
    subkey=BlockContext.ARGUMENTS[0],
    save_to=BlockContext.ARGUMENTS[1],
)

on_new_tweet_on_home_timeline_event = bridge.events.on_new_tweet_on_home_timeline
on_new_tweet_on_home_timeline_event.add_trigger_block(
    id="on_new_tweet_on_home_timeline",
    message="When new tweet on timeline. Save to %1",
    arguments=[VariableBlockArgument("struct")],
    save_to=BlockContext.ARGUMENTS[0],
)

on_followed_event = bridge.events.on_followed
on_followed_event.add_trigger_block(
    id="on_followed",
    message="When followed. Save user to %1",
    arguments=[VariableBlockArgument(str)],
    save_to=BlockContext.ARGUMENTS[0],
)

on_unfollowed_event = bridge.events.on_unfollowed
on_unfollowed_event.add_trigger_block(
    id="on_unfollowed",
    message="When unfollowed. Save user to %1",
    arguments=[VariableBlockArgument(str)],
    save_to=BlockContext.ARGUMENTS[0],
)


@on_new_tweet_event.on_new_listeners
def on_new_listeners(user, subkey):
    LISTENER.add_to_user(user, subkey)


@on_new_tweet_on_home_timeline_event.on_new_listeners
def on_new_timeline_listeners(user, _subkey):
    LISTENER.add_home_timeline(user)


def send_message_to_platform(user_id, message):
    logging.info("New message: {}".format(get_tweet_message(message._json)))
    on_new_tweet_event.send(to_user=user_id,
                            content=message._json,
                            event=message._json,
                            subkey=message._json['user']['screen_name'])


def send_timeline_update_to_platform(user_id, message):
    logging.info("New timeline update: {}".format(
        get_tweet_message(message._json)))
    on_new_tweet_on_home_timeline_event.send(
        to_user=user_id,
        content=message._json,
        event=message._json,
    )


def send_follow_to_platform(user_id, follower_id):
    logging.info("Followed {} by {}".format(user_id, follower_id))
    RATE_LIMIT_MANAGER.notify_will_use(user_id, rate_limit.USER_INFO)
    user = AUTH.get_api(user_id).get_user(follower_id)

    logging.info("FOLLOWED by: {}".format(user.screen_name))
    on_followed_event.send(
        to_user=user_id,
        content=user.screen_name,
        event=user.screen_name,
    )


def send_unfollow_to_platform(user_id, follower_id):
    logging.info("Unfollowed {} by {}".format(user_id, follower_id))
    RATE_LIMIT_MANAGER.notify_will_use(user_id, rate_limit.USER_INFO)
    user = AUTH.get_api(user_id).get_user(follower_id)

    logging.info("UNFOLLOWED by: {}".format(user.screen_name))
    on_unfollowed_event.send(
        to_user=user_id,
        content=user.screen_name,
        event=user.screen_name,
    )


LISTENER.on_message = send_message_to_platform
LISTENER.on_timeline_update = send_timeline_update_to_platform
LISTENER.on_new_follow = send_follow_to_platform
LISTENER.on_new_unfollow = send_unfollow_to_platform


@bridge.getter(
    id="get_last_tweet",  # Give it an ID
    message="Get last tweet from %1",  # Set block message
    arguments=[
        BlockArgument(str, "obichero"),
    ],
    block_result_type="struct",
)
def get_last_tweet(account_name, extra_data):
    RATE_LIMIT_MANAGER.notify_will_use(extra_data.user_id,
                                       rate_limit.USER_TIMELINE)
    timeline = AUTH.get_api(extra_data.user_id).user_timeline(account_name,
                                                              count=1)

    if len(timeline) == 0:
        raise Exception("Empty timeline")
    return timeline[0]._json


@bridge.getter(
    id="get_tweet_message",  # Give it an ID
    message="Get message from tweet in %1",  # Set block message
    arguments=[
        BlockArgument("struct", '<< Add here a "get-tweet" block >>'),
    ],
    block_result_type=str,
)
def get_tweet_message(tweet_data, extra_data=None):
    return tweet_data['text']

@bridge.getter(
    id="get_original_tweet_message",  # Give it an ID
    message="Get message from tweet in %1. Get original message if reweet.",  # Set block message
    arguments=[
        BlockArgument("struct", '<< Add here a "get-tweet" block >>'),
    ],
    block_result_type=str,
)
def get_original_tweet_message(tweet_data, extra_data=None):
    if "retweeted_status" in tweet_data:
        return tweet_data["retweeted_status"]["text"]
    return tweet_data["text"]


@bridge.getter(
    id="get_hashtags",  # Give it an ID
    message="Get hashtags from tweet in %1",  # Set block message
    arguments=[
        BlockArgument("struct", '<< Add here a "get-tweet" block >>'),
    ],
    block_result_type=list,
)
def get_tweet_hashtags(tweet_data, extra_data=None):
    hashtags = tweet_data.get('entities', {}).get('hashtags', [])
    return [tag['text'] for tag in hashtags]

@bridge.getter(
    id="is_retweet",  # Give it an ID
    message="Is %1 a retweet",  # Set block message
    arguments=[
        BlockArgument("struct", '<< Add here a "get-tweet" block >>'),
    ],
    block_result_type=bool,
)
def is_retweet(tweet_data, extra_data=None):
    return "retweeted_status" in tweet_data


@bridge.getter(
    id="get_tweet_author",  # Give it an ID
    message="Author of tweet %1",  # Set block message
    arguments=[BlockArgument("struct", '<< Add here a "tweet" block >>')],
    block_result_type=str,
)
def get_tweet_author(tweet_data, extra_data=None):
    name = tweet_data.get('user', {}).get('screen_name', None)
    return name


@bridge.operation(
    id="follow_user",  # Give it an ID
    message="Follow %1",  # Set block message
    arguments=[
        BlockArgument(str, 'obichero'),
    ])
def follow_user(screen_name, extra_data=None):
    RATE_LIMIT_MANAGER.notify_will_use(extra_data.user_id, rate_limit.FOLLOW)
    api = AUTH.get_api(extra_data.user_id)
    try:
        api.create_friendship(screen_name=screen_name)
    except tweepy.error.TweepError as e:
        errors = json.loads(e.response.text).get('errors', [])
        if len(errors) > 0:
            if errors[0].get(
                    'code',
                    None) == 160:  # "You've already requested to follow ..."
                return
        raise


@bridge.operation(
    id="unfollow_user",  # Give it an ID
    message="Unfollow %1",  # Set block message
    arguments=[
        BlockArgument(str, 'obichero'),
    ])
def unfollow_user(screen_name, extra_data=None):
    RATE_LIMIT_MANAGER.notify_will_use(extra_data.user_id, rate_limit.FOLLOW)
    api = AUTH.get_api(extra_data.user_id)
    api.destroy_friendship(screen_name=screen_name)


@bridge.getter(
    id="is_user_follower",  # Give it an ID
    message="Is %1 a follower?",  # Set block message
    arguments=[
        BlockArgument(str, "obichero"),
    ],
    block_result_type=bool,
)
def is_user_follower(screen_name, extra_data=None):
    twitter_id = STORAGE.get_twitter_user_id(extra_data.user_id)

    RATE_LIMIT_MANAGER.notify_will_use(extra_data.user_id,
                                       rate_limit.USER_INFO)
    api = AUTH.get_api(extra_data.user_id)
    follower_id = api.get_user(screen_name=screen_name).id
    return STORAGE.is_follower(twitter_id, follower_id)


if __name__ == "__main__":
    logging.basicConfig(format="%(asctime)s - %(levelname)s [%(filename)s] %(message)s")
    logging.getLogger().setLevel(logging.DEBUG)

    LISTENER.start()
    try:
        bridge.run()
    except Exception:
        traceback.print_exc()
        os._exit(1)

    os._exit(0)  # Force stopping after the bridge ends
